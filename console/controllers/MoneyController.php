<?php
namespace console\controllers;

use yii\console\Controller;
use common\models\RequestOutputMoney;
use common\models\UserBonus;

class MoneyController extends Controller
{
    /**
     * Минимальная партия пачки
     *
     * @var int
     */
    public $limit_from = 1;

    /**
     * Максимальная партия пачки
     *
     * @var int
     */
    public $limit_to = 100;

    /**
     * Обработчик зависших, "потерявщихся" запросов
     */
    public function work_time_out()
    {

        // toDo Найти все зависшие запрос через дату запуска + доп фильтры, посмотреть статус ошибки, в случае необходимости сбросить их в положение выгрузки
        /**
        if (RequestOutputMoney::find()
        }
         *
         */
    }


    /**
     * Метод отправки в банк сообщений о переводе и софрмирование массива ответа
     *
     * @param $model_for_json
     * @return array
     */
    public function send_bank($model_for_json)
    {
        //toDo метода запроса обернуть в TRY/CATCH
        echo 'Метод заглушка для отправки в банк, зависит от API банка, возвращает данные банка. Данные $model_for_json передаются в банк';
        $out = [
            [
                'request_id' => 1,              //идентификация очереди (берем из при отрпавке и формируем при ответе)
                'bank_app' => true,             //проведена ли транзакция
                'bank_mess'=> 'Сообщение банка',//сообщение банка
                'money_value' => 20,            //объем списания

            ],
            [
                'request_id' => 2,
                'bank_app' => true,
                'bank_mess'=> 'Сообщение банка',
                'money_value' =>   40,
            ],
        ];
        return $out;
    }

    /**
     * Обработчик текущих запросов на исполнение
     *
     * @param int $pack
     * @throws \Exception
     */
    public function work_now($pack)
    {
        $dt = $this->get_diff_date_time();

        if (RequestOutputMoney::find()->where(['now'=>1])->exists()) {
            $i=0;
            foreach (RequestOutputMoney::find()->where(['now'=>1])->all() as $item) {
                $item->started = 1;
                $item->save();

                echo 'Собираем из модели $pack строк и упаковываем их в JSON объект для банка'."\n";
                $i++;
                $model_for_json []= [
                    'user_id' =>$item->user->id,
                    'moned_value' => $item->bonus_valu,     //предполагаем что проверку для очереди произвели еще до постановки в очередь (на лимиты)
                    ];
                if ($i==$pack) {
                    $this->operation_request($this->send_bank($model_for_json));
                    unset($model_for_json);
                    $i=0;
                }

            }
        }
    }


    public function operation_request($answer = FALSE)
    {
        if ($answer) foreach ($answer as $item) {
            if (RequestOutputMoney::find()->where(['id'=>$item->request_id])->exists()) {
                //так как транзакций нет в AR оборачивает с TRY/CATCH
                try {
                    $model_bonus = new UserBonus();
                    $model_bonus->bonus_id = 1; //деньги
                    $model_bonus->bonus_value = $answer['money_value'];
                    $model_bonus->type = 'del';
                    $model_bonus->save();
                    //toDo написать метод пересчета баланса пользователя и исполнить его в этом месте
                    $model_request = RequestOutputMoney::findOne($item->request_id);
                    $model_request->status = RequestOutputMoney::STATUS_CLOSE;
                    $model_request->wait_now = 0;
                    $model_request->now = 0;
                    $model_request->bank_status = $answer['bank_app'];
                    $model_request->bank_message = $answer['bank_mess'];
                    $model_request->save();


                } catch (\Exception $ex) {
                    //toDo создать логгер и где нибудь фиксить ошибку
                    /**
                    "ERROR Code: " . $ex->getCode();
                    "ERROR Message: " . $ex->getMessage();
                     */
                }
            }
        }
    }


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function actionRun($pack= 1) {

        if (is_numeric($pack) && $pack>=$this->limit_from && $pack<=$this->limit_to) {
            $this->work_time_out();
            $this->work_now($pack);
        }
    }

    /**
     * Воращает текущую дату время для сравнения
     *
     * @return string
     * @throws \Exception
     */
    public function get_date_time() {
        $datetime_now = $dateFile = new \DateTime(null, new \DateTimeZone('Europe/Moscow'));
        return $datetime_now->format('Y-m-d H:i:s');
    }

    /**
     * Воращает дату время для сравнения - 1 час
     *
     * @return string
     * @throws \Exception
     */
    public function get_diff_date_time() {
        $datetime_now = $dateFile = new \DateTime(null, new \DateTimeZone('Europe/Moscow'));
        $datetime = $datetime_now->sub(new \DateInterval('PT1H'));;
        return $datetime->format('Y-m-d H:i:s');
    }

    public function getUnic_file_name()
    {
        $dateFile = new \DateTime();
        return md5($dateFile->format('Y-m-d H:i:s') . rand(0, 10000));
    }
}